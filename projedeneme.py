# -*- coding: utf-8 -*-
"""projedeneme.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WfnSV2JdZ8Uj94WWj1LoiXfH4sLCKgRw
"""

# Load the Drive helper and mount
from google.colab import drive

# This will prompt for authorization.
drive.mount('/content/drive')


import os
os.listdir("drive/MyDrive/Hastaliklar_toplu")

import keras
from keras.models import Sequential,Input,Model
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras.layers.advanced_activations import LeakyReLU
import tensorflow as tf
from tensorflow import keras
import keras.layers as layers

from keras.preprocessing.image import ImageDataGenerator
from keras.utils.np_utils import to_categorical 
train_datagen = ImageDataGenerator(rescale = 1./255,validation_split = 0.2)
test_datagen = ImageDataGenerator(rescale = 1./255)

train_directory ='/content/drive/My Drive/Hastaliklar_toplu/Fruit/train'
test_directory ='/content/drive/My Drive/Hastaliklar_toplu/Fruit/test'

train_generator = train_datagen.flow_from_directory(train_directory,target_size=(227,227),subset='training',
                                                   batch_size = 20,class_mode ="categorical")

valid_generator = train_datagen.flow_from_directory(train_directory,target_size=(227,227),subset="validation",
                                                    batch_size=20,class_mode="categorical")

test_generator = test_datagen.flow_from_directory(test_directory,target_size=(227,227),
                                                   batch_size = 20,class_mode ="categorical")

num_classes = len(train_generator.class_indices)
train_labels = train_generator.classes
train_labels = to_categorical(train_labels,num_classes = num_classes)

model = keras.Sequential()
model.add(layers.Conv2D(filters=96, kernel_size=(11, 11), 
                        strides=(4, 4), activation="relu", 
                        input_shape=(227, 227, 3)))
model.add(layers.BatchNormalization())
model.add(layers.MaxPool2D(pool_size=(3, 3), strides= (2, 2)))
model.add(layers.Conv2D(filters=256, kernel_size=(5, 5), 
                        strides=(1, 1), activation="relu", 
                        padding="same"))
model.add(layers.BatchNormalization())
model.add(layers.MaxPool2D(pool_size=(3, 3), strides=(2, 2)))
model.add(layers.Conv2D(filters=384, kernel_size=(3, 3), 
                        strides=(1, 1), activation="relu", 
                        padding="same"))
model.add(layers.BatchNormalization())
model.add(layers.Conv2D(filters=384, kernel_size=(3, 3), 
                        strides=(1, 1), activation="relu", 
                        padding="same"))
model.add(layers.BatchNormalization())
model.add(layers.Conv2D(filters=256, kernel_size=(3, 3), 
                        strides=(1, 1), activation="relu", 
                        padding="same"))
model.add(layers.BatchNormalization())
model.add(layers.MaxPool2D(pool_size=(3, 3), strides=(2, 2)))
model.add(layers.Flatten())
model.add(layers.Dense(4096, activation="relu"))
model.add(layers.Dropout(0.5))
model.add(layers.Dense(num_classes, activation="softmax"))
model.compile(loss='categorical_crossentropy', 
              optimizer=tf.optimizers.SGD(lr=0.001), 
              metrics=['accuracy'])



model.fit_generator(train_generator
          ,validation_data=valid_generator,epochs=10,validation_steps = 50)

model.evaluate(test_generator)

from keras.preprocessing.image import load_img,img_to_array
import numpy as np

pimgpath = "/content/drive/My Drive/predict/bitterorangehealthy.jpg"

test_img = load_img(pimgpath,target_size=(227,227))
test_img = img_to_array(test_img)
test_img = np.expand_dims(test_img,axis=0)

result = model.predict(test_img)
for i in result:
  print(i)