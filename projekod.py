# -*- coding: utf-8 -*-
"""projekod.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qh1PsoynGp0PDiGJ_RQIxhJpv18yzFyi
"""

from google.colab import drive
drive.mount('/content/drive')
#Google hesabı bağlanmalı

import os
import keras
import numpy as np
from keras.models import Sequential,Input,Model
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras.layers.advanced_activations import LeakyReLU
import tensorflow as tf
from tensorflow import keras
import keras.layers as layers
from tensorflow.keras.optimizers import Adam
from keras.preprocessing.image import ImageDataGenerator
from keras.utils.np_utils import to_categorical 
from tensorflow.keras.layers import Input
kayit_yeri = '/content/drive/My Drive/Hastaliklar_toplu/'

#Fruit dosyalarını alma
train_datagen = ImageDataGenerator(rescale = 1./255,validation_split = 0.2)
test_datagen = ImageDataGenerator(rescale = 1./255)

fruit_train_directory ='/content/drive/My Drive/Hastaliklar_toplu/Fruit/train'
fruit_test_directory ='/content/drive/My Drive/Hastaliklar_toplu/Fruit/test'


fruit_train_generator = train_datagen.flow_from_directory(fruit_train_directory,target_size=(227,227),subset='training',
                                                   batch_size = 32,class_mode ="sparse")

fruit_valid_generator = train_datagen.flow_from_directory(fruit_train_directory,target_size=(227,227),subset="validation",
                                                    batch_size=32,class_mode="sparse")

fruit_test_generator = test_datagen.flow_from_directory(fruit_test_directory,target_size=(227,227),
                                                   batch_size = 32,class_mode ="sparse")

fruit_num_classes = len(fruit_train_generator.class_indices)
fruit_train_labels = fruit_train_generator.classes
fruit_train_labels = to_categorical(fruit_train_labels,num_classes = fruit_num_classes)

BATCH_SIZE = 32

f_train_count = len(fruit_train_generator.classes)
f_valid_count = len(fruit_valid_generator.classes)

f_train_steps_per_ep = np.ceil((f_train_count/BATCH_SIZE)-1)
f_valid_steps_per_ep = np.ceil((f_valid_count/BATCH_SIZE)-1)

fruit_num_classes2 = len(fruit_test_generator.class_indices)
fruit_test_labels = fruit_test_generator.classes
fruit_test_labels = to_categorical(fruit_test_labels,fruit_num_classes2)

#Plant dosyalarını alma
train_datagen2 = ImageDataGenerator(rescale = 1./255,validation_split = 0.2)
test_datagen2 = ImageDataGenerator(rescale = 1./255)

plant_train_directory ='/content/drive/My Drive/Hastaliklar_toplu/Plant/train'
plant_test_directory ='/content/drive/My Drive/Hastaliklar_toplu/Plant/test'

plant_train_generator = train_datagen2.flow_from_directory(plant_train_directory,target_size=(227,227),subset='training',
                                                   batch_size = 32,class_mode ="sparse")

plant_valid_generator = train_datagen2.flow_from_directory(plant_train_directory,target_size=(227,227),subset="validation",
                                                    batch_size=32,class_mode="sparse")

plant_test_generator = test_datagen2.flow_from_directory(plant_test_directory,target_size=(227,227),
                                                   batch_size = 32,class_mode ="sparse")

BATCH_SIZE = 32

p_train_count = len(plant_train_generator.classes)
p_valid_count = len(plant_valid_generator.classes)

p_train_steps_per_ep = np.ceil((p_train_count/BATCH_SIZE)-1)
p_valid_steps_per_ep = np.ceil((p_valid_count/BATCH_SIZE)-1)


plant_num_classes = len(plant_train_generator.class_indices)
plant_train_labels = plant_train_generator.classes
plant_train_labels = to_categorical(plant_train_labels,num_classes = plant_num_classes)

plant_num_classes2 = len(plant_test_generator.class_indices)
plant_test_labels = plant_test_generator.classes
plant_test_labels = to_categorical(plant_test_labels,plant_num_classes2)

#Leaf dosyalarını alma
train_datagen3 = ImageDataGenerator(rescale = 1./255,validation_split = 0.2)
test_datagen3 = ImageDataGenerator(rescale = 1./255)

leaf_train_directory ='/content/drive/My Drive/Hastaliklar_toplu/Leaf/train'
leaf_test_directory ='/content/drive/My Drive/Hastaliklar_toplu/Leaf/test'

leaf_train_generator = train_datagen3.flow_from_directory(leaf_train_directory,target_size=(227,227),subset='training',
                                                   batch_size = 20,class_mode ="sparse")

leaf_valid_generator = train_datagen3.flow_from_directory(leaf_train_directory,target_size=(227,227),subset="validation",
                                                    batch_size=20,class_mode="sparse")

leaf_test_generator = test_datagen3.flow_from_directory(leaf_test_directory,target_size=(227,227),
                                                   batch_size = 20,class_mode ="sparse")


BATCH_SIZE = 32

l_train_count = len(leaf_train_generator.classes)
l_valid_count = len(leaf_valid_generator.classes)

l_train_steps_per_ep = np.ceil((l_train_count/BATCH_SIZE)-1)
l_valid_steps_per_ep = np.ceil((l_valid_count/BATCH_SIZE)-1)

leaf_num_classes = len(leaf_train_generator.class_indices)
leaf_train_labels1 = leaf_train_generator.classes
leaf_train_labels = to_categorical(leaf_train_labels1,num_classes = leaf_num_classes)

leaf_num_classes2 = len(leaf_test_generator.class_indices)
leaf_test_labels1 = leaf_test_generator.classes
leaf_test_labels = to_categorical(leaf_test_labels1,leaf_num_classes2)

def CnnModel(num_classes):
  model = Sequential()
  model.add(Conv2D(32,3,padding="same", activation="relu", input_shape=(224,224,3)))
  model.add(MaxPooling2D())

  model.add(Conv2D(32, 3, padding="same", activation="relu"))
  model.add(MaxPooling2D())

  model.add(Conv2D(64, 3, padding="same", activation="relu"))
  model.add(MaxPooling2D())
  model.add(Dropout(0.4))

  model.add(Flatten())
  model.add(Dense(128,activation="relu"))
  model.add(Dense(num_classes, activation="softmax"))
  opt = Adam(learning_rate=0.000001)
  model.compile(optimizer = opt , loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True) , metrics = ['accuracy'])
  return model

#Fruit modelini oluştur
fruit_model = CnnModel(fruit_num_classes)
fruit_model.summary()
#fruit_model.load_weights(kayit_yeri+"fruitmodelcheckpoint1")

#Leaf modelini oluştur
#leaf_model = CnnModel(leaf_num_classes)
#leaf_model.load_weights(kayit_yeri+"leafmodelcheckpoint")

#Plant modelini oluştur
#plant_model= CnnModel(plant_num_classes)
#plant_model.load_weights(kayit_yeri+"plantmodelcheckpoint")

#Fruit modeli eğitme

#Her epochta tekrar kaydetme fonksiyonu
fmodel_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(
    filepath=kayit_yeri+"fruitmodelcheckpoint",
    save_weights_only=True,
    monitor='val_accuracy',
    mode='max',
    save_best_only=True)

#Modeli eğit
fruit_model.fit(fruit_train_generator,steps_per_epoch = f_train_steps_per_ep,validation_data = fruit_valid_generator,epochs = 20,
                validation_steps = f_valid_steps_per_ep,callbacks=[fmodel_checkpoint_callback])

#Fruit test etme
fruit_model.evaluate(fruit_test_generator)

#Fruit ağırlıkları kaydetme
#fruit_model.save_weights(kayit_yeri+"fruitmodelcheckpoint1")

#leaf modeli eğitme

#Her epochta tekrar kaydetme fonksiyonu
model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(
    filepath=kayit_yeri+"leafmodelcheckpoint",
    save_weights_only=True,
    monitor='val_accuracy',
    mode='max',
    save_best_only=True)


#Modeli eğit
leaf_model.fit(leaf_train_generator,steps_per_epoch = l_train_steps_per_ep,validation_data = leaf_valid_generator,epochs = 20,
                validation_steps = l_valid_steps_per_ep,callbacks=[model_checkpoint_callback])
print("----------")

#Leaf test etme
leaf_model.evaluate(leaf_test_generator)

#Leaf ağırlıkları kaydetme
leaf_model.save_weights(kayit_yeri+"leafmodelcheckpoint")

#plant modeli eğitme


#Her epochta tekrar kaydetme fonksiyonu
pmodel_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(
    filepath=kayit_yeri+"plantmodelcheckpoint",
    save_weights_only=True,
    monitor='val_accuracy',
    mode='max',
    save_best_only=True)

#Modeli eğit
plant_model.fit(plant_train_generator,steps_per_epoch = p_train_steps_per_ep,validation_data = plant_valid_generator,epochs = 50,
                validation_steps = p_valid_steps_per_ep,callbacks=[pmodel_checkpoint_callback])
print("----------")

#Plant test etme
plant_model.evaluate(plant_test_generator)

#Plant ağırlıkları kaydetme
plant_model.save_weights(kayit_yeri+"plantmodelcheckpoint")

#Fruit modeli kaydetme
#fruit_model.save("/content/drive/MyDrive/Hastaliklar_toplu/"+"fruitmodeldeneme.h5")

#Leaf modeli kaydetme
#leaf_model.save("/content/drive/MyDrive/Hastaliklar_toplu/"+"leafmodeldeneme.h5")

#Plant modeli kaydetme
#plant_model.save("/content/drive/MyDrive/Hastaliklar_toplu/"+"plantmodeldeneme.h5")

#Model tahmin işlemleri
from keras.preprocessing.image import load_img,img_to_array
import matplotlib.pyplot as plt

#pimgpath = "/content/drive/My Drive/predict/apple-healthy.jpg"
#tahmin(pimgpath,fruit_model)
#l1 l3 l5 l16 l30 l35
limgpath = "/content/drive/My Drive/Hastaliklar_toplu/Leaf/predict/L1.jpg"
test_img = load_img(limgpath,target_size=(227,227,3))

implot = plt.imshow(test_img)
plt.show()

testimg = img_to_array(test_img)
testimg2 = np.expand_dims(testimg,axis=0)

result = leaf_model.predict(testimg2)

print(result)

#print(leaf_train_generator.class_indices)
print(fruit_train_generator.class_indices)
#print(plant_train_generator.class_indices)