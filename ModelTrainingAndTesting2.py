# -*- coding: utf-8 -*-
"""projedeneme.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WfnSV2JdZ8Uj94WWj1LoiXfH4sLCKgRw
"""

from google.colab import drive
drive.mount('/content/drive')

#import matplotlib.pyplot as plt
#import matplotlib.image as mpimg

#imgpath = "/content/drive/My Drive/Hastaliklar_toplu/Fruit/train/F6/2a5r2j8.jpg"

#img = mpimg.imread(imgpath)
#implot = plt.imshow(img)
#plt.show()

import os
os.listdir("/content/drive/My Drive/Hastaliklar_toplu")

import keras
from keras.models import Sequential,Input,Model
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras.layers.advanced_activations import LeakyReLU
import tensorflow as tf
from tensorflow import keras
import keras.layers as layers
from tensorflow.keras.optimizers import Adam

from keras.preprocessing.image import ImageDataGenerator
from keras.utils.np_utils import to_categorical 
train_datagen = ImageDataGenerator(rescale = 1./255,validation_split = 0.2)
test_datagen = ImageDataGenerator(rescale = 1./255)

fruit_train_directory ='/content/drive/My Drive/Hastaliklar_toplu/Fruit/train'
fruit_test_directory ='/content/drive/My Drive/Hastaliklar_toplu/Fruit/test'


fruit_train_generator = train_datagen.flow_from_directory(fruit_train_directory,target_size=(224,224),subset='training',
                                                   batch_size = 20,class_mode ="categorical")

fruit_valid_generator = train_datagen.flow_from_directory(fruit_train_directory,target_size=(224,224),subset="validation",
                                                    batch_size=20,class_mode="categorical")

fruit_test_generator = test_datagen.flow_from_directory(fruit_test_directory,target_size=(224,224),
                                                   batch_size = 20,class_mode ="categorical")

fruit_num_classes = len(fruit_train_generator.class_indices)
fruit_train_labels = fruit_train_generator.classes
fruit_train_labels = to_categorical(fruit_train_labels,num_classes = fruit_num_classes)

fruit_num_classes2 = len(fruit_test_generator.class_indices)
fruit_test_labels = fruit_test_generator.classes
fruit_test_labels = to_categorical(fruit_test_labels,fruit_num_classes2)

plant_train_directory ='/content/drive/My Drive/Hastaliklar_toplu/Plant/train'
plant_test_directory ='/content/drive/My Drive/Hastaliklar_toplu/Plant/test'

plant_train_generator = train_datagen.flow_from_directory(plant_train_directory,target_size=(224,224),subset='training',
                                                   batch_size = 20,class_mode ="categorical")

plant_valid_generator = train_datagen.flow_from_directory(plant_train_directory,target_size=(224,224),subset="validation",
                                                    batch_size=20,class_mode="categorical")

plant_test_generator = test_datagen.flow_from_directory(plant_test_directory,target_size=(224,224),
                                                   batch_size = 20,class_mode ="categorical")


plant_num_classes = len(plant_train_generator.class_indices)
plant_train_labels = plant_train_generator.classes
plant_train_labels = to_categorical(plant_train_labels,num_classes = plant_num_classes)

plant_num_classes2 = len(plant_test_generator.class_indices)
plant_test_labels = plant_test_generator.classes
plant_test_labels = to_categorical(plant_test_labels,plant_num_classes2)

leaf_train_directory ='/content/drive/My Drive/Hastaliklar_toplu/Leaf/train'
leaf_test_directory ='/content/drive/My Drive/Hastaliklar_toplu/Leaf/test'

leaf_train_generator = train_datagen.flow_from_directory(leaf_train_directory,target_size=(224,224),subset='training',
                                                   batch_size = 20,class_mode ="categorical")

leaf_valid_generator = train_datagen.flow_from_directory(leaf_train_directory,target_size=(224,224),subset="validation",
                                                    batch_size=20,class_mode="categorical")

leaf_test_generator = test_datagen.flow_from_directory(leaf_test_directory,target_size=(224,224),
                                                   batch_size = 20,class_mode ="categorical")


leaf_num_classes = len(leaf_train_generator.class_indices)
leaf_train_labels = leaf_train_generator.classes
leaf_train_labels = to_categorical(leaf_train_labels,num_classes = leaf_num_classes)

leaf_num_classes2 = len(leaf_test_generator.class_indices)
leaf_test_labels = leaf_test_generator.classes
leaf_test_labels = to_categorical(leaf_test_labels,leaf_num_classes2)

#Modelin genel fonksiyonu
def VggModel(num_classes):
  model = Sequential()
  model.add(Conv2D(input_shape=(224,224,3),filters=64,kernel_size=(3,3),padding="same", activation="relu"))
  model.add(Conv2D(filters=64,kernel_size=(3,3),padding="same", activation="relu"))
  model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
  model.add(Conv2D(filters=128, kernel_size=(3,3), padding="same", activation="relu"))
  model.add(Conv2D(filters=128, kernel_size=(3,3), padding="same", activation="relu"))
  model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
  model.add(Conv2D(filters=256, kernel_size=(3,3), padding="same", activation="relu"))
  model.add(Conv2D(filters=256, kernel_size=(3,3), padding="same", activation="relu"))
  model.add(Conv2D(filters=256, kernel_size=(3,3), padding="same", activation="relu"))
  model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
  model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
  model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
  model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
  model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))
  model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
  model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
  model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
  model.add(MaxPooling2D(pool_size=(2,2),strides=(2,2)))

  model.add(Flatten())
  model.add(Dense(units=4096,activation="relu"))
  model.add(Dense(units=4096,activation="relu"))
  model.add(Dense(units=num_classes, activation="softmax"))

  opt = Adam(learning_rate=0.001)
  model.compile(optimizer=opt, loss=keras.losses.categorical_crossentropy, metrics=['accuracy'])
  return model

#Fruit,leaf,plant modellerini oluşturma

fruit_model = VggModel(fruit_num_classes)
fruit_model.summary()
#leaf_model = VggModel(leaf_num_classes)
#leaf_model.summary()
#plant_model= VggModel(plant_num_classes)
#plant_model.summary()

#Fruit modeli eğitme ve test etme

fruit_model.fit(fruit_train_generator
         ,validation_data=fruit_valid_generator,epochs=10,validation_steps = 50)
print("-----")
fruit_model.evaluate(fruit_test_generator)

#plant modeli eğitme ve test etme

#plant_history = plant_model.fit(plant_train_generator
 #         ,validation_data=plant_valid_generator,epochs=10,validation_steps = 50)
print("-----")
#plant_model.evaluate(plant_test_generator)

#leaf modeli eğitme ve test etme

#leaf_model.fit(leaf_train_generator
#          ,validation_data=leaf_valid_generator,epochs=50,validation_steps = 50)
#print("-----")
#leaf_model.evaluate(leaf_test_generator)

#Model kaydetme

#Model tahmin işlemleri
from keras.preprocessing.image import load_img,img_to_array
import numpy as np

def tahmin(pimgpath,model):
  test_img = load_img(pimgpath,target_size=(227,227))
  test_img = img_to_array(test_img)
  test_img = np.expand_dims(test_img,axis=0)

  result = model.predict(test_img)
  for i in result:
    print(i)

#pimgpath = "/content/drive/My Drive/predict/1.jpg"
#tahmin(pimgpath,fruit_model)
